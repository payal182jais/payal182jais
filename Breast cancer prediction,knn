"cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Identifying best value for k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# preliminaries\n",
    "# load libraries\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn import datasets\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import Pipeline, FeatureUnion\n",
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['data', 'target', 'target_names', 'DESCR', 'feature_names'])\n"
     ]
    }
   ],
   "source": [
    "# load iris flower dataset\n",
    "iris = datasets.load_iris()\n",
    "print (iris.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(150, 4) (150,)\n",
      "[[5.1 3.5 1.4 0.2]\n",
      " [4.9 3.  1.4 0.2]\n",
      " [4.7 3.2 1.3 0.2]\n",
      " [4.6 3.1 1.5 0.2]\n",
      " [5.  3.6 1.4 0.2]\n",
      " [5.4 3.9 1.7 0.4]\n",
      " [4.6 3.4 1.4 0.3]\n",
      " [5.  3.4 1.5 0.2]\n",
      " [4.4 2.9 1.4 0.2]\n",
      " [4.9 3.1 1.5 0.1]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = iris.data\n",
    "y = iris.target\n",
    "print (X.shape, y.shape)\n",
    "print (X[:10])\n",
    "y[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.90068117,  1.03205722, -1.3412724 , -1.31297673],\n",
       "       [-1.14301691, -0.1249576 , -1.3412724 , -1.31297673],\n",
       "       [-1.38535265,  0.33784833, -1.39813811, -1.31297673],\n",
       "       [-1.50652052,  0.10644536, -1.2844067 , -1.31297673],\n",
       "       [-1.02184904,  1.26346019, -1.3412724 , -1.31297673],\n",
       "       [-0.53717756,  1.95766909, -1.17067529, -1.05003079],\n",
       "       [-1.50652052,  0.80065426, -1.3412724 , -1.18150376],\n",
       "       [-1.02184904,  0.80065426, -1.2844067 , -1.31297673],\n",
       "       [-1.74885626, -0.35636057, -1.3412724 , -1.31297673],\n",
       "       [-1.14301691,  0.10644536, -1.2844067 , -1.4444497 ]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Standardize Data\n",
    "# Create standadizer\n",
    "standadizer = StandardScaler()\n",
    "X_std = standadizer.fit_transform(X)\n",
    "X_std[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit a K-Nearest Neighbor Classifier\n",
    "# Fit a KNN classifier with 5 neighbors\n",
    "knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean', n_jobs=-1).fit(X_std, y)\n",
    "# n_jobs will decide the number of parallel jobs to run for neighbors search.\n",
    "# if n_jobs is equal to -1, then the number of jobs is to set to the number of CPU cores available"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Search Space of Possible Values of k\n",
    "# Create a pipeline\n",
    "pipe = Pipeline([('standadizer', standadizer), ('knn', knn)])\n",
    "# Create space of candidate values\n",
    "search_space = [{'knn__n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n",
      "[CV] knn__n_neighbors=1 ..............................................\n",
      "[CV] ..... knn__n_neighbors=1, score=0.9333333333333333, total=   0.0s\n",
      "[CV] knn__n_neighbors=1 ..............................................\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.1s remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] ..... knn__n_neighbors=1, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=1 ..............................................\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.3s remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] ..... knn__n_neighbors=1, score=0.9333333333333333, total=   0.0s\n",
      "[CV] knn__n_neighbors=1 ..............................................\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    0.5s remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] .................... knn__n_neighbors=1, score=0.9, total=   0.0s\n",
      "[CV] knn__n_neighbors=1 ..............................................\n",
      "[CV] .................... knn__n_neighbors=1, score=1.0, total=   0.0s\n",
      "[CV] knn__n_neighbors=2 ..............................................\n",
      "[CV] ..... knn__n_neighbors=2, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=2 ..............................................\n",
      "[CV] ..... knn__n_neighbors=2, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=2 ..............................................\n",
      "[CV] .................... knn__n_neighbors=2, score=0.9, total=   0.0s\n",
      "[CV] knn__n_neighbors=2 ..............................................\n",
      "[CV] .................... knn__n_neighbors=2, score=0.9, total=   0.0s\n",
      "[CV] knn__n_neighbors=2 ..............................................\n",
      "[CV] .................... knn__n_neighbors=2, score=1.0, total=   0.0s\n",
      "[CV] knn__n_neighbors=3 ..............................................\n",
      "[CV] ..... knn__n_neighbors=3, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=3 ..............................................\n",
      "[CV] ..... knn__n_neighbors=3, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=3 ..............................................\n",
      "[CV] ..... knn__n_neighbors=3, score=0.9333333333333333, total=   0.0s\n",
      "[CV] knn__n_neighbors=3 ..............................................\n",
      "[CV] .................... knn__n_neighbors=3, score=0.9, total=   0.0s\n",
      "[CV] knn__n_neighbors=3 ..............................................\n",
      "[CV] .................... knn__n_neighbors=3, score=1.0, total=   0.0s\n",
      "[CV] knn__n_neighbors=4 ..............................................\n",
      "[CV] ..... knn__n_neighbors=4, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=4 ..............................................\n",
      "[CV] ..... knn__n_neighbors=4, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=4 ..............................................\n",
      "[CV] .................... knn__n_neighbors=4, score=1.0, total=   0.0s\n",
      "[CV] knn__n_neighbors=4 ..............................................\n",
      "[CV] ..... knn__n_neighbors=4, score=0.8666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=4 ..............................................\n",
      "[CV] ..... knn__n_neighbors=4, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=5 ..............................................\n",
      "[CV] ..... knn__n_neighbors=5, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=5 ..............................................\n",
      "[CV] ..... knn__n_neighbors=5, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=5 ..............................................\n",
      "[CV] ..... knn__n_neighbors=5, score=0.9333333333333333, total=   0.0s\n",
      "[CV] knn__n_neighbors=5 ..............................................\n",
      "[CV] ..... knn__n_neighbors=5, score=0.9333333333333333, total=   0.0s\n",
      "[CV] knn__n_neighbors=5 ..............................................\n",
      "[CV] .................... knn__n_neighbors=5, score=1.0, total=   0.0s\n",
      "[CV] knn__n_neighbors=6 ..............................................\n",
      "[CV] ..... knn__n_neighbors=6, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=6 ..............................................\n",
      "[CV] ..... knn__n_neighbors=6, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=6 ..............................................\n",
      "[CV] .................... knn__n_neighbors=6, score=1.0, total=   0.0s\n",
      "[CV] knn__n_neighbors=6 ..............................................\n",
      "[CV] .................... knn__n_neighbors=6, score=0.9, total=   0.0s\n",
      "[CV] knn__n_neighbors=6 ..............................................\n",
      "[CV] .................... knn__n_neighbors=6, score=1.0, total=   0.0s\n",
      "[CV] knn__n_neighbors=7 ..............................................\n",
      "[CV] ..... knn__n_neighbors=7, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=7 ..............................................\n",
      "[CV] ..... knn__n_neighbors=7, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=7 ..............................................\n",
      "[CV] ..... knn__n_neighbors=7, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=7 ..............................................\n",
      "[CV] .................... knn__n_neighbors=7, score=0.9, total=   0.0s\n",
      "[CV] knn__n_neighbors=7 ..............................................\n",
      "[CV] .................... knn__n_neighbors=7, score=1.0, total=   0.0s\n",
      "[CV] knn__n_neighbors=8 ..............................................\n",
      "[CV] ..... knn__n_neighbors=8, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=8 ..............................................\n",
      "[CV] ..... knn__n_neighbors=8, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=8 ..............................................\n",
      "[CV] .................... knn__n_neighbors=8, score=1.0, total=   0.0s\n",
      "[CV] knn__n_neighbors=8 ..............................................\n",
      "[CV] ..... knn__n_neighbors=8, score=0.9333333333333333, total=   0.0s\n",
      "[CV] knn__n_neighbors=8 ..............................................\n",
      "[CV] ..... knn__n_neighbors=8, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=9 ..............................................\n",
      "[CV] ..... knn__n_neighbors=9, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=9 ..............................................\n",
      "[CV] ..... knn__n_neighbors=9, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=9 ..............................................\n",
      "[CV] ..... knn__n_neighbors=9, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=9 ..............................................\n",
      "[CV] .................... knn__n_neighbors=9, score=0.9, total=   0.0s\n",
      "[CV] knn__n_neighbors=9 ..............................................\n",
      "[CV] .................... knn__n_neighbors=9, score=1.0, total=   0.0s\n",
      "[CV] knn__n_neighbors=10 .............................................\n",
      "[CV] .... knn__n_neighbors=10, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=10 .............................................\n",
      "[CV] .... knn__n_neighbors=10, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=10 .............................................\n",
      "[CV] .... knn__n_neighbors=10, score=0.9666666666666667, total=   0.0s\n",
      "[CV] knn__n_neighbors=10 .............................................\n",
      "[CV] .... knn__n_neighbors=10, score=0.9333333333333333, total=   0.0s\n",
      "[CV] knn__n_neighbors=10 .............................................\n",
      "[CV] .... knn__n_neighbors=10, score=0.9666666666666667, total=   0.0s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done  50 out of  50 | elapsed:   10.6s finished\n"
     ]
    }
   ],
   "source": [
    "# Search for possible values of k\n",
    "# Create grid search GridSearchCV implements a 'fit' and a 'score' method\n",
    "# The parameters of the estimator used to apply these methods are optimized by cross-validated \n",
    "# grid-search over a parameter grid\n",
    "clf = GridSearchCV(pipe, search_space, cv=5, verbose=4).fit(X_std, y)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Combine Pipeline and GridSearchCV to search over parameters for all processing steps at once. Fitting the GridSearchCv object not only searches for the best parameters, but also automatically fits a new model on the whole training dataset with the parameters that yielded the best cross-validation performances."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view k for best performing model\n",
    "# best neighborhood size (k)\n",
    "clf.best_estimator_.get_params()['knn__n_neighbors']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
